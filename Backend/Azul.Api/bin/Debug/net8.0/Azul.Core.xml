<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Azul.Core</name>
    </assembly>
    <members>
        <member name="T:Azul.Core.BoardAggregate.Board">
            <inheritdoc cref="T:Azul.Core.BoardAggregate.Contracts.IBoard"/>
        </member>
        <member name="P:Azul.Core.BoardAggregate.Contracts.IBoard.HasCompletedHorizontalLine">
            <summary>
            Checks if the player has completed a horizontal line on the wall.
            </summary>
        </member>
        <member name="M:Azul.Core.BoardAggregate.Contracts.IBoard.AddTilesToPatternLine(System.Collections.Generic.IReadOnlyList{Azul.Core.TileFactoryAggregate.Contracts.TileType},System.Int32,Azul.Core.TileFactoryAggregate.Contracts.ITileFactory)">
            <summary>
            Adds tiles to the pattern line.
            Excess tiles are added to the floor line.
            If the floor line is full, the excess tiles are added to the used tiles of the <paramref name="tileFactory"/>.
            </summary>
            <param name="tilesToAdd">The tiles to add to the pattern line</param>
            <param name="patternLineIndex">The index of the pattern line (0 is the top line, 4 is the bottom line)</param>
            <param name="tileFactory">
            Tiles that cannot be placed on the pattern line and also not on the floor line, should be added to the used tiles of the factory.
            </param>
        </member>
        <member name="M:Azul.Core.BoardAggregate.Contracts.IBoard.AddTilesToFloorLine(System.Collections.Generic.IReadOnlyList{Azul.Core.TileFactoryAggregate.Contracts.TileType},Azul.Core.TileFactoryAggregate.Contracts.ITileFactory)">
            <summary>
            Adds tiles to the floor line.
            If the floor line is full, the excess tiles are added to the used tiles of the <paramref name="tileFactory"/>.
            </summary>
            <param name="tilesToAdd">The tiles to add to the floor line</param>
            <param name="tileFactory">
            Tiles that cannot be placed on the floor line, should be added to the used tiles of the factory.
            </param>
        </member>
        <member name="M:Azul.Core.BoardAggregate.Contracts.IBoard.DoWallTiling(Azul.Core.TileFactoryAggregate.Contracts.ITileFactory)">
            <summary>
            Moved tiles from completed pattern lines to the wall and calculates the score.
            The floor line is also cleared and the point loss is calculated.
            Excess tiles are added to the used tiles of the <paramref name="tileFactory"/>.
            </summary>
        </member>
        <member name="M:Azul.Core.BoardAggregate.Contracts.IBoard.CalculateFinalBonusScores">
            <summary>
            Adds bonus points to the <see cref="P:Azul.Core.BoardAggregate.Contracts.IBoard.Score"/>.
            Points are given
            - for completed horizontal lines (2 points)
            - completed vertical lines (7 points)
            - completed colors (10 points).
            </summary>
        </member>
        <member name="T:Azul.Core.BoardAggregate.Contracts.IPatternLine">
            <summary>
            Represents a pattern line on the board.
            </summary>
        </member>
        <member name="P:Azul.Core.BoardAggregate.Contracts.IPatternLine.Length">
            <summary>
            The (maximum) length of the pattern line.
            </summary>
        </member>
        <member name="P:Azul.Core.BoardAggregate.Contracts.IPatternLine.TileType">
            <summary>
            The type of the tiles that are placed on the pattern line.
            If no tiles are placed on the pattern line, the value is null.
            </summary>
        </member>
        <member name="P:Azul.Core.BoardAggregate.Contracts.IPatternLine.NumberOfTiles">
            <summary>
            The number of tiles of <see cref="P:Azul.Core.BoardAggregate.Contracts.IPatternLine.TileType"/> that are placed on the pattern line.
            </summary>
        </member>
        <member name="P:Azul.Core.BoardAggregate.Contracts.IPatternLine.IsComplete">
            <summary>
            Indicates whether the pattern line is full.
            The pattern line is full when the <see cref="P:Azul.Core.BoardAggregate.Contracts.IPatternLine.NumberOfTiles"/>> on the pattern line is equal to the <see cref="P:Azul.Core.BoardAggregate.Contracts.IPatternLine.Length"/>> of the pattern line.
            </summary>
        </member>
        <member name="M:Azul.Core.BoardAggregate.Contracts.IPatternLine.Clear">
            <summary>
            Removes all tiles from the pattern line and sets <see cref="P:Azul.Core.BoardAggregate.Contracts.IPatternLine.TileType"/> to null.
            </summary>
        </member>
        <member name="M:Azul.Core.BoardAggregate.Contracts.IPatternLine.TryAddTiles(Azul.Core.TileFactoryAggregate.Contracts.TileType,System.Int32,System.Int32@)">
            <summary>
            Tries to add the specified number of tiles of the specified type to the pattern line.
            </summary>
            <param name="type">The type of the tiles that are added</param>
            <param name="numberOfTilesToAdd">Number of tiles to add</param>
            <param name="remainingNumberOfTiles">Contains the number of tiles that could not be added because the pattern line is complete</param>
            <exception cref="T:System.InvalidOperationException">When pattern line is already complete or already contains tiles of another type</exception>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.IGame.Id">
            <summary>
            The unique identifier of the game
            </summary>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.IGame.TileFactory">
            <summary>
            The tile factory
            </summary>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.IGame.Players">
            <summary>
            The players (minimum 2, maximum 4) that are playing the game
            </summary>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.IGame.PlayerToPlayId">
            <summary>
            The unique identifier of the player whose turn it is
            </summary>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.IGame.RoundNumber">
            <summary>
            The round number of the game (starts at 1).
            A round is completed when the factory is empty and all players have placed their tiles.
            </summary>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.IGame.HasEnded">
            <summary>
            Indicates whether the game has ended (when one or more players have completed a horizontal row on their wall).
            </summary>
        </member>
        <member name="M:Azul.Core.GameAggregate.Contracts.IGame.TakeTilesFromFactory(System.Guid,System.Guid,Azul.Core.TileFactoryAggregate.Contracts.TileType)">
            <summary>
            Takes tiles from a factory display for a player.
            </summary>
            <param name="playerId">The unique identifier of the player</param>
            <param name="displayId">The unique identifier of the display of the factory (the table center is considered to be a special kind of display)</param>
            <param name="tileType">The type of the tile to take. All tiles of this type are taken.</param>
        </member>
        <member name="M:Azul.Core.GameAggregate.Contracts.IGame.PlaceTilesOnPatternLine(System.Guid,System.Int32)">
            <summary>
            Places the tiles the player has previously taken on a pattern line.
            If the move succeeds, the player's turn is over.
            </summary>
            <param name="playerId">The unique identifier of the player</param>
            <param name="patternLineIndex">The index of the target pattern line (0 is the top line, 4 is the bottom line)</param>
        </member>
        <member name="M:Azul.Core.GameAggregate.Contracts.IGame.PlaceTilesOnFloorLine(System.Guid)">
            <summary>
            Places the tiles the player has previously taken on the floor line.
            If the move succeeds, the player's turn is over.
            </summary>
            <param name="playerId">The unique identifier of the player</param>
        </member>
        <member name="T:Azul.Core.GameAggregate.Contracts.IGameFactory">
            <summary>
            Factory to create games
            </summary>
        </member>
        <member name="M:Azul.Core.GameAggregate.Contracts.IGameFactory.CreateNewForTable(Azul.Core.TableAggregate.Contracts.ITable)">
            <summary>
            Creates a new game for a table.
            Steps include:
            * Fill a <see cref="T:Azul.Core.TileFactoryAggregate.TileBag"/> with 20 tiles of each color
            * Create a tile factory with displays (amount is taken from <see cref="T:Azul.Core.TableAggregate.Contracts.ITablePreferences"/>) and the created bag
            * Generate a game id
            * Create a game with the created tile factory and the players that are seated at the table
            </summary>
            <param name="table">The table that wants to play a game</param>
        </member>
        <member name="T:Azul.Core.GameAggregate.Contracts.IGameRepository">
            <summary>
            Represents a repository for games
            </summary>
        </member>
        <member name="M:Azul.Core.GameAggregate.Contracts.IGameService.TakeTilesFromFactory(System.Guid,System.Guid,System.Guid,Azul.Core.TileFactoryAggregate.Contracts.TileType)">
            <summary>
            Takes all the tiles of the specified type from the specified display.
            </summary>
            <param name="gameId">Unique identifier of the game</param>
            <param name="playerId">Unique identifier of the player</param>
            <param name="displayId">Unique identifier of the factory display (the table center is considered to be a special kind of factory display)</param>
            <param name="tileType">The type of the tiles to take</param>
        </member>
        <member name="M:Azul.Core.GameAggregate.Contracts.IGameService.PlaceTilesOnPatternLine(System.Guid,System.Guid,System.Int32)">
            <summary>
            Places the tiles the player has previously taken on a pattern line.
            </summary>
            <param name="gameId">Unique identifier of the game</param>
            <param name="playerId">Unique identifier of the player</param>
            <param name="patternLineIndex">The index of the target pattern line (0 is the top line, 4 is the bottom line)</param>
        </member>
        <member name="M:Azul.Core.GameAggregate.Contracts.IGameService.PlaceTilesOnFloorLine(System.Guid,System.Guid)">
            <summary>
            Places the tiles the player has previously taken on the floor line.
            </summary>
            <param name="gameId">Unique identifier of the game</param>
            <param name="playerId">Unique identifier of the player</param>
        </member>
        <member name="T:Azul.Core.GameAggregate.Contracts.IPlaceTilesMove">
            <summary>
            Represents a move where a player places tiles on a pattern line or on the floor line.
            </summary>
            <remarks>
            EXTRA: Not needed to implement the minimal requirements.
            </remarks>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.IPlaceTilesMove.PlaceInFloorLine">
            <summary>
            Indicates whether the tiles should be placed on the floor line.
            </summary>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.IPlaceTilesMove.PatternLineIndex">
            <summary>
            The index of the pattern line where the tiles should be placed.
            This value is only relevant if <see cref="P:Azul.Core.GameAggregate.Contracts.IPlaceTilesMove.PlaceInFloorLine"/> is false.
            </summary>
        </member>
        <member name="T:Azul.Core.GameAggregate.Contracts.ITakeTilesMove">
            <summary>
            Represents a move where a player takes all tiles of a certain type from a factory display.
            </summary>
            <remarks>
            EXTRA: Not needed to implement the minimal requirements.
            </remarks>
        </member>
        <member name="P:Azul.Core.GameAggregate.Contracts.ITakeTilesMove.FactoryDisplayId">
            <summary>
            The unique identifier of the factory display (can be a normal factory display or can be the table center).
            </summary>
        </member>
        <member name="T:Azul.Core.GameAggregate.GameService">
            <inheritdoc cref="T:Azul.Core.GameAggregate.Contracts.IGameService"/>
        </member>
        <member name="T:Azul.Core.GameAggregate.PlaceTilesMove">
            <inheritdoc cref="T:Azul.Core.GameAggregate.Contracts.IPlaceTilesMove"/>
        </member>
        <member name="T:Azul.Core.GameAggregate.TakeTilesMove">
            <inheritdoc cref="T:Azul.Core.GameAggregate.Contracts.ITakeTilesMove"/>
        </member>
        <member name="T:Azul.Core.PlayerAggregate.ComputerPlayer">
            <inheritdoc cref="T:Azul.Core.PlayerAggregate.Contracts.IPlayer"/>
        </member>
        <member name="T:Azul.Core.PlayerAggregate.Contracts.IGamePlayStrategy">
            <summary>
            A strategy for an AI player. The strategy can be used to determine a move for the AI player in a game.
            </summary>
            <remarks>This is an EXTRA. Not needed to implement the minimal requirements.</remarks>
        </member>
        <member name="M:Azul.Core.PlayerAggregate.Contracts.IGamePlayStrategy.GetBestTakeTilesMove(System.Guid,Azul.Core.GameAggregate.Contracts.IGame)">
            <summary>
            Gets the best 'take tiles' move to play for a player.
            </summary>
            <param name="playerId">Identifier of the (AI) player that wants to make a move.</param>
            <param name="game">The game the (AI) player is in.</param>
            <returns>
            The best move according to the strategy.
            </returns>
        </member>
        <member name="M:Azul.Core.PlayerAggregate.Contracts.IGamePlayStrategy.GetBestPlaceTilesMove(System.Guid,Azul.Core.GameAggregate.Contracts.IGame)">
            <summary>
            Gets the best 'place tiles' move to play for a player.
            </summary>
            <param name="playerId">Identifier of the (AI) player that wants to make a move.</param>
            <param name="game">The game the (AI) player is in.</param>
            <returns>
            The best move according to the strategy.
            </returns>
        </member>
        <member name="T:Azul.Core.PlayerAggregate.Contracts.IPlayer">
            <summary>
            Represents a player in the game.
            </summary>
        </member>
        <member name="P:Azul.Core.PlayerAggregate.Contracts.IPlayer.Id">
            <summary>
            Unique identifier of the player
            </summary>
        </member>
        <member name="P:Azul.Core.PlayerAggregate.Contracts.IPlayer.Name">
            <summary>
            (Display) name of the player
            </summary>
        </member>
        <member name="P:Azul.Core.PlayerAggregate.Contracts.IPlayer.LastVisitToPortugal">
            <summary>
            The date the player last visited Portugal. Null if the player has never visited Portugal.
            </summary>
        </member>
        <member name="P:Azul.Core.PlayerAggregate.Contracts.IPlayer.Board">
            <summary>
            The board of the player containing the pattern lines, the wall and the floor line
            </summary>
        </member>
        <member name="P:Azul.Core.PlayerAggregate.Contracts.IPlayer.HasStartingTile">
            <summary>
            Indicates whether the player has a starting tile (taken from the center or given at the start of the game)
            </summary>
        </member>
        <member name="P:Azul.Core.PlayerAggregate.Contracts.IPlayer.TilesToPlace">
            <summary>
            The tiles that the player has taken from the factory and must place on the board
            </summary>
        </member>
        <member name="T:Azul.Core.PlayerAggregate.HumanPlayer">
            <inheritdoc cref="T:Azul.Core.PlayerAggregate.Contracts.IPlayer"/>
        </member>
        <member name="T:Azul.Core.PlayerAggregate.PlayerBase">
            <inheritdoc cref="T:Azul.Core.PlayerAggregate.Contracts.IPlayer"/>
        </member>
        <member name="T:Azul.Core.TableAggregate.Contracts.ITable">
            <summary>
            A (virtual) table where players play a game.
            </summary>
        </member>
        <member name="P:Azul.Core.TableAggregate.Contracts.ITable.Id">
            <summary>
            The unique identifier of the table.
            </summary>
        </member>
        <member name="P:Azul.Core.TableAggregate.Contracts.ITable.Preferences">
            <summary>
            The preferences of the table. This determines game play options like the number of players.
            </summary>
        </member>
        <member name="P:Azul.Core.TableAggregate.Contracts.ITable.SeatedPlayers">
            <summary>
            The players who are currently seated at the table.
            </summary>
        </member>
        <member name="P:Azul.Core.TableAggregate.Contracts.ITable.HasAvailableSeat">
            <summary>
            Indicates whether there is an available seat at the table.
            </summary>
        </member>
        <member name="P:Azul.Core.TableAggregate.Contracts.ITable.GameId">
            <summary>
            The unique identifier of the game that is being played at the table.
            When no game is started yet, this property is set to <see cref="F:System.Guid.Empty"/>.
            </summary>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITable.Join(Azul.Core.UserAggregate.User)">
            <summary>
            Adds a player to the table.
            </summary>
            <param name="user">User for which a player should be created</param>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITable.Leave(System.Guid)">
            <summary>
            Removes a player from the table.
            </summary>
            <param name="userId">Unique identifier of the user (player) that wants to leave the table</param>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITable.FillWithArtificialPlayers(Azul.Core.PlayerAggregate.Contracts.IGamePlayStrategy)">
            <summary>
            EXTRA: Fills the table with computer players.
            </summary>
            <param name="gamePlayStrategy">Strategy that should be used by the AI players to determine their next move</param>
            <remarks>This is an EXTRA. Not needed to implement the minimal requirements.</remarks>
        </member>
        <member name="T:Azul.Core.TableAggregate.Contracts.ITableFactory">
            <summary>
            Used to create new tables.
            </summary>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableFactory.CreateNewForUser(Azul.Core.UserAggregate.User,Azul.Core.TableAggregate.Contracts.ITablePreferences)">
            <summary>
            Creates a new table with the given preferences.
            The user automatically joins the table.
            </summary>
            <param name="user">The user</param>
            <param name="preferences">Determine the game options (e.g. number of players, ...)</param>
        </member>
        <member name="T:Azul.Core.TableAggregate.Contracts.ITableManager">
            <summary>
            Manages all the tables of the application
            </summary>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableManager.JoinOrCreateTable(Azul.Core.UserAggregate.User,Azul.Core.TableAggregate.Contracts.ITablePreferences)">
            <summary>
            Searches a table with available seats that matches the given preferences.
            If such a table is found, the user joins it.
            If no table is found, a new table is created and the user joins the new table.
            </summary>
            <returns>The table the user has joined</returns>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableManager.LeaveTable(System.Guid,Azul.Core.UserAggregate.User)">
            <summary>
            Removes a user from a table.
            If the table has no players left, it is removed from the system.
            </summary>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableManager.StartGameForTable(System.Guid)">
            <summary>
            Starts a game for a table.
            </summary>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableManager.FillWithArtificialPlayers(System.Guid,Azul.Core.UserAggregate.User)">
            <summary>
            EXTRA: Fills the table with computer players.
            </summary>
            <remarks>This is an EXTRA. Not needed to implement the minimal requirements.</remarks>
        </member>
        <member name="P:Azul.Core.TableAggregate.Contracts.ITablePreferences.NumberOfPlayers">
            <summary>
            Total number of players that can take part in the game.
            The default value is 2.
            </summary>
        </member>
        <member name="P:Azul.Core.TableAggregate.Contracts.ITablePreferences.NumberOfArtificialPlayers">
            <summary>
            Number of artificial players that should take part in the game.
            The default value is 0.
            Must be less than <see cref="P:Azul.Core.TableAggregate.Contracts.ITablePreferences.NumberOfPlayers"/>.
            </summary>
        </member>
        <member name="P:Azul.Core.TableAggregate.Contracts.ITablePreferences.NumberOfFactoryDisplays">
            <summary>
            Number of factory displays that are used in the game.
            This value is calculated based on the <see cref="P:Azul.Core.TableAggregate.Contracts.ITablePreferences.NumberOfPlayers"/>.
            </summary>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableRepository.Add(Azul.Core.TableAggregate.Contracts.ITable)">
            <summary>
            Adds a table to storage.
            </summary>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableRepository.Get(System.Guid)">
            <summary>
            Gets a table to storage.
            </summary>
            <exception cref="T:Azul.Core.Util.DataNotFoundException">When no table is found</exception>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableRepository.Remove(System.Guid)">
            <summary>
            Removes a table from storage.
            </summary>
            <param name="tableId">The identifier of the table</param>
            <exception cref="T:Azul.Core.Util.DataNotFoundException">When no table is found</exception>
        </member>
        <member name="M:Azul.Core.TableAggregate.Contracts.ITableRepository.FindTablesWithAvailableSeats(Azul.Core.TableAggregate.Contracts.ITablePreferences)">
            <summary>
            Find the tables in storage that have a seat available.
            Only tables that match the given <paramref name="preferences"/> are returned.
            </summary>
        </member>
        <member name="T:Azul.Core.TableAggregate.Table">
            <inheritdoc cref="T:Azul.Core.TableAggregate.Contracts.ITable"/>
        </member>
        <member name="T:Azul.Core.TableAggregate.TableFactory">
            <inheritdoc cref="T:Azul.Core.TableAggregate.Contracts.ITableFactory"/>
        </member>
        <member name="T:Azul.Core.TableAggregate.TableManager">
            <inheritdoc cref="T:Azul.Core.TableAggregate.Contracts.ITableManager"/>
        </member>
        <member name="T:Azul.Core.TableAggregate.TablePreferences">
            <inheritdoc cref="T:Azul.Core.TableAggregate.Contracts.ITablePreferences"/>
        </member>
        <member name="T:Azul.Core.TileFactoryAggregate.Contracts.ITileBag">
            <summary>
            Represents a bag of tiles that can used to randomly take a certain amount tiles.
            The bag can also be filled with tiles.
            </summary>
        </member>
        <member name="P:Azul.Core.TileFactoryAggregate.Contracts.ITileBag.Tiles">
            <summary>
            The tiles that are currently in the bag.
            </summary>
        </member>
        <member name="M:Azul.Core.TileFactoryAggregate.Contracts.ITileBag.AddTiles(System.Int32,Azul.Core.TileFactoryAggregate.Contracts.TileType)">
            <summary>
            Adds a certain amount of tiles of a certain type to the bag.
            </summary>
        </member>
        <member name="M:Azul.Core.TileFactoryAggregate.Contracts.ITileBag.AddTiles(System.Collections.Generic.IReadOnlyList{Azul.Core.TileFactoryAggregate.Contracts.TileType})">
            <summary>
            Adds a list of tiles to the bag (e.g. the used tiles in the <see cref="T:Azul.Core.TileFactoryAggregate.Contracts.ITileFactory"/>).
            </summary>
        </member>
        <member name="M:Azul.Core.TileFactoryAggregate.Contracts.ITileBag.TryTakeTiles(System.Int32,System.Collections.Generic.IReadOnlyList{Azul.Core.TileFactoryAggregate.Contracts.TileType}@)">
            <summary>
            Tries to take a certain amount of tiles from the bag.
            </summary>
            <param name="amount">Amount of tiles to take</param>
            <param name="tiles">
            The tiles that were taken.
            It could be less than the <paramref name="amount"/> that was asked if the bag does not contain enough tiles.
            Will be an empty list if the bag is empty.
            </param>
            <returns>
            True if the bag contained enough tiles to take the requested <paramref name="amount"/>.
            False if the bag did not contain enough tiles to take the requested <paramref name="amount"/>.
            </returns>
        </member>
        <member name="T:Azul.Core.TileFactoryAggregate.TileBag">
            <inheritdoc cref="T:Azul.Core.TileFactoryAggregate.Contracts.ITileBag"/>
        </member>
    </members>
</doc>
